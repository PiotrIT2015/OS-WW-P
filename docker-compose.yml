version: '3.8'

services:
  # 1. Usługa aplikacji Python
  app:
    build: .  # Buduje obraz na podstawie Dockerfile z bieżącego folderu
    container_name: os-ww-p
    restart: unless-stopped
    volumes:
      - .:/app # Montuje kod aplikacji do kontenera, zmiany w kodzie są widoczne od razu
    environment:
      # Zmienne środowiskowe do połączenia z bazą danych
      # Użyj tych wartości w kodzie main.py do połączenia
      - MYSQL_HOST=db
      - MYSQL_USER=root
      - MYSQL_PASSWORD=" "
      - MYSQL_DATABASE=search_db
    depends_on:
      - db # Czeka, aż kontener z bazą danych wystartuje

  # 2. Usługa serwera Apache
  apache:
    image: httpd:2.4 # Używa oficjalnego obrazu Apache
    container_name: apache_server
    restart: unless-stopped
    ports:
      - "8080:80" # Udostępnia port 80 kontenera na porcie 8080 Twojego komputera
    volumes:
      # Montuje naszą konfigurację Apache do odpowiedniego folderu w kontenerze
      - ./apache.conf:/usr/local/apache2/conf/extra/httpd-vhosts.conf
    depends_on:
      - os-ww-p # Czeka, aż kontener z aplikacją Python wystartuje

  # 3. Usługa bazy danych MySQL
  db:
    image: mysql:8.0 # Używa oficjalnego obrazu MySQL
    container_name: mysql_db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: mydatabase
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    volumes:
      # Używa "nazwanego woluminu" do przechowywania danych bazy
      # Dane nie znikną po restarcie kontenera
      - mysql_data:/var/lib/mysql

# Definicja nazwanego woluminu
volumes:
  mysql_data: